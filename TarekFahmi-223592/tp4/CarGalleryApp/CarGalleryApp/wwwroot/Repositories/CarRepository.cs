using CarGalleryApp.Models;
using MongoDB.Bson;
using MongoDB.Driver;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace CarGalleryApp.wwwroot.Repositories
{
    public class CarRepository : ICarRepository
    {
        private readonly IMongoCollection<Car> _cars;
        public CarRepository(IConfiguration config)
        {
            MongoClient client = new MongoClient(config.GetConnectionString("CarGalleryDb"));
            IMongoDatabase database = client.GetDatabase("CarGalleryDb");
            _cars = database.GetCollection<Car>("Cars");
        }


        public IEnumerable<Car> Get()
        {
            return _cars.Find(car => true).ToList();
        }

        public Car Get(string id)
        {
            return _cars.Find(car => car.Id == id).FirstOrDefault();
        }



public Car Create(Car car)
        {
            _cars.InsertOne(car); // Insert the car directly into the MongoDB collection
            return car; // Return the created car entity with updated ID (if it's generated by MongoDB)
        }
        public void Update(string id, Car carIn)
        {
           
                var filter = Builders<Car>.Filter.Eq("_id", ObjectId.Parse(id)); // Assuming your Car object has a property named "_id" of type ObjectId
                var options = new ReplaceOptions { IsUpsert = false }; // Do not insert if the document does not exist

                _cars.ReplaceOne(filter, carIn, options);
            
        }

        public void Remove(Car carIn)
        {
            _cars.DeleteOne(car => car.Id == carIn.Id);
        }

        public void Remove(string id)
        {
            _cars.DeleteOne(car => car.Id == id);
        }
    }
}
